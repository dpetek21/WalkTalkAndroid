package hr.foi.rampu.walktalk.firebaseHandler

import android.util.Log
import com.google.firebase.firestore.FirebaseFirestore
import hr.foi.rampu.walktalk.entities.Route

class RouteHandler {
    lateinit var owner : String
    lateinit var db : FirebaseFirestore
     fun constructor() {
         owner=UserDataContainer.username
         db = FirebaseFirestore.getInstance()
    }
    fun addRoute(route: Route) {
        db.collection("routes")
            .add(route)
            .addOnSuccessListener { documentReference ->
                val autoGeneratedId = documentReference.id
                Log.d("Firestore", "Route saved with ID: $autoGeneratedId")

                val updatedRoute = route.copy(id = autoGeneratedId)
                updateRoute(updatedRoute)
            }
            .addOnFailureListener { e ->
                Log.w("Firestore", "Error adding route", e)
            }
    }
    fun updateRoute(route : Route){
        val routeId = route.id
        if (routeId != null) {
            db.collection("routes")
                .document(routeId)
                .set(route)
                .addOnSuccessListener {
                    Log.d("Firestore", "Route updated with ID: $routeId")
                }
                .addOnFailureListener { e ->
                    Log.w("Firestore", "Error updating route", e)
                }
        } else {
            addRoute(route);
        }
    }
    fun getRoutesOfOwner(owner: String, callback: (List<Route>) -> Unit) {
        db.collection("routes")
            .whereEqualTo("owner", owner)
            .get()
            .addOnSuccessListener { result ->
                val routesList = mutableListOf<Route>()
                for (document in result) {
                    val route = document.toObject(Route::class.java)
                    routesList.add(route)
                }
                callback(routesList)
            }
            .addOnFailureListener { exception ->
                callback(emptyList())
            }
    }
    fun deleteRoute(routeId: String) {
        db.collection("routes")
            .document(routeId)
            .delete()
            .addOnSuccessListener {
                Log.d("Firestore", "Route deleted with ID: $routeId")
            }
            .addOnFailureListener { e ->
                Log.w("Firestore", "Error deleting route", e)
            }
    }
}